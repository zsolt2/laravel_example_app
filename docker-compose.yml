# For more information: https://laravel.com/docs/sail

version: '3'
services:
    laravel.dev:
        build:
            context: ./laravel
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${WWWGROUP}'
            target: dev
        image: localhost:5000/app-test:${APP_VERSION}
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        ports:
            - '${APP_PORT:-80}:80'
        environment:
            WWWUSER: '${WWWUSER}'
            LARAVEL_SAIL: 1
            XDEBUG_MODE: '${SAIL_XDEBUG_MODE:-off}'
            XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}'
        volumes:
            - './laravel:/var/www/html'
        networks:
            - sail
        depends_on:
            - pgsql
            - redis
            - maio
            - es01
    pgsql: 
        image: 'postgres:13'
        ports:
            - '${FORWARD_DB_PORT:-5432}:5432'
        environment:
            PGPASSWORD: '${DB_PASSWORD:-secret}'
            POSTGRES_DB: '${DB_DATABASE}'
            POSTGRES_USER: '${DB_USERNAME}'
            POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
        volumes:
            - './pgsql:/var/lib/postgresql/data'
            - ./elastic:/elastic/
        mem_limit: ${MEM_LIMIT}
        networks:
            - sail
        healthcheck:
            test: ["CMD", "pg_isready", "-q", "-d", "${DB_DATABASE}", "-U", "${DB_USERNAME}"]
            retries: 3
            timeout: 5s
    pgadmin:
        image: 'dpage/pgadmin4'
        ports:
            - '81:80'
        environment:
            PGADMIN_DEFAULT_PASSWORD: '$PGADM_PASSWORD'
            PGADMIN_DEFAULT_EMAIL: '$PGADM_EMAIL'
        volumes:
            - 'sail-pgadmin:/var/lib/pgadmin'
            - './pgadmin/servers.json:/pgadmin4/servers.json'
        networks:
            - sail
        depends_on:
            - pgsql
    redis:
        image: 'redis:alpine'
        ports:
            - '${REDIS_PORT:-6379}:6379'
        volumes:
            - 'sail-redis:/data'
        networks:
            - sail
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            retries: 3
            timeout: 5s
    #MogileFS All In One Container
    maio:
        image: 'hrchu/mogilefs-all-in-one'
        ports:
            - '7001:7001'
            - '7005:7005'
        environment:
            - DOMAIN_NAME=${MAIO_DOMAIN}
            - CLASS_NAMES=${MAIO_CLASS_NAMES}
        volumes:
            - 'sail-maio-mogdata:/var/mogdata'
            - 'sail-maio-mysql:/var/lib/mysql'
        networks:
            - sail

    wiremock:
        image: 'wiremock/wiremock:2.32.0'
        ports:
          - '8443:8443'
        volumes:
          - 'sail-wiremock:/home/wiremock'
        networks:
          - sail
    nginx:
        image: nginx
        ports:
          - '${FORWARD_NGINX_PORT:-8080}:${NGINX_PORT:-80}'
        environment:
          - NGINX_PORT=${NGINX_PORT:-80}
          - NGINX_HOST=${NGINX_HOST}
        volumes:
          - './nginx/nginx.conf:/etc/nginx/nginx.conf:ro'
        networks:
          - sail
    # Elasticsearch
    setup:
        image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
        volumes:
            - certs:/usr/share/elasticsearch/config/certs
        user: "0"
        command: >
            bash -c '
            if [ x${ELASTIC_PASSWORD} == x ]; then
                echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
                exit 1;
            elif [ x${KIBANA_PASSWORD} == x ]; then
                echo "Set the KIBANA_PASSWORD environment variable in the .env file";
                exit 1;
            fi;
            if [ ! -f certs/ca.zip ]; then
                echo "Creating CA";
                bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
                unzip config/certs/ca.zip -d config/certs;
            fi;
            if [ ! -f certs/certs.zip ]; then
                echo "Creating certs";
                echo -ne \
                "instances:\n"\
                "  - name: es01\n"\
                "    dns:\n"\
                "      - es01\n"\
                "      - localhost\n"\
                "    ip:\n"\
                "      - 127.0.0.1\n"\
                > config/certs/instances.yml;
                bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
                unzip config/certs/certs.zip -d config/certs;
            fi;
            echo "Setting file permissions"
            chown -R root:root config/certs;
            find . -type d -exec chmod 750 \{\} \;;
            find . -type f -exec chmod 640 \{\} \;;
            echo "Waiting for Elasticsearch availability";
            until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
            echo "Setting kibana_system password";
            until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
            echo "All done!";
            '
        networks:
            - sail
        healthcheck:
            test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
            interval: 1s
            timeout: 5s
            retries: 120

    es01:
        depends_on:
            setup:
                condition: service_healthy
        image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
        volumes:
            - certs:/usr/share/elasticsearch/config/certs
            - esdata01:/usr/share/elasticsearch/data
            - ./elastic:/elastic/
        ports:
            - ${ES_PORT}:9200
            - 8221:8221
        environment:
            - node.name=es01
            - cluster.name=${CLUSTER_NAME}
            - cluster.initial_master_nodes=es01
            - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
            - bootstrap.memory_lock=true
            - xpack.security.enabled=true
            - xpack.security.authc.api_key.enabled=true
            - xpack.security.http.ssl.enabled=true
            - xpack.security.http.ssl.key=certs/es01/es01.key
            - xpack.security.http.ssl.certificate=certs/es01/es01.crt
            - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.http.ssl.verification_mode=certificate
            - xpack.security.transport.ssl.enabled=true
            - xpack.security.transport.ssl.key=certs/es01/es01.key
            - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
            - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.transport.ssl.verification_mode=certificate
            - xpack.license.self_generated.type=${LICENSE}
        mem_limit: ${MEM_LIMIT}
        ulimits:
            memlock:
                soft: -1
                hard: -1
        networks:
            - sail
        healthcheck:
            test: [ "CMD-SHELL", "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'", ]
            interval: 10s
            timeout: 10s
            retries: 120            

    kibana:
        depends_on:
            es01:
                condition: service_healthy
        image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
        volumes:
            - certs:/usr/share/kibana/config/certs
            - kibanadata:/usr/share/kibana/data
        ports:
            - ${KIBANA_PORT}:5601
        environment:
            - SERVERNAME=kibana
            - ELASTICSEARCH_HOSTS=https://es01:9200
            - ELASTICSEARCH_USERNAME=kibana_system
            - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
            - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
        mem_limit: ${MEM_LIMIT}
        networks:
            - sail
        healthcheck:
            test: [ "CMD-SHELL", "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'", ]
            interval: 10s
            timeout: 10s
            retries: 120

networks:
    sail:
        driver: bridge
volumes:
    sail-pgsql:
        driver: local
    sail-redis:
        driver: local
    sail-pgadmin:
        driver: local
    sail-maio-mogdata:
        driver: local
    sail-maio-mysql:
        driver: local
    sail-wiremock:
        driver: local
    certs:
        driver: local
    esdata01: 
        driver: local
    kibanadata:
        driver: local

